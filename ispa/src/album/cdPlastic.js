/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import * as THREE from 'three'
import { useLoader } from '@react-three/fiber'
import { TextureLoader } from 'three'

function getColorFromMap(){ // TOFIX: change color based on an active object
  let albumToColor = localStorage.getItem("albumToColor");
  albumToColor = albumToColor ? JSON.parse(albumToColor) : {};
  return albumToColor["Crest"];
}

function getImageFromMap(){ // TOFIX: change color based on an active object
  let playlist = localStorage.getItem("playlist");
  playlist = playlist ? JSON.parse(playlist) : {};
  console.log("out", playlist[0].image_url);
  return playlist[4].image_url;
}

export default function CDPlastic(props) {
  const { nodes } = useGLTF('/models/cd.gltf');
  const plastic = new THREE.MeshPhysicalMaterial({
    color: 0xd3d1ce,
    metalness: 0,
    roughness: 0.5,
    transmission: 1,
    ior: 1.5,
    reflectivity: 0.5,
    thickness: 2.5,
    envMapIntensity: 1.5,
    clearcoat: 1,
    clearcoatRoughness: 0.1,
    normalScale: 0.3,
    clearcoatNormalScale: 0.2,
  });
  const blackPlastic = new THREE.MeshStandardMaterial({
    color: 0x111111,
  });
  const color = new THREE.MeshStandardMaterial({
    color: getColorFromMap(),
  });
  // const albumImage = useLoader(TextureLoader, getImageFromMap())
  const albumImage = useLoader(TextureLoader, getImageFromMap(), (loader) => {
    loader.crossOrigin = "anonymous";
  });
  console.log("album image:" ,albumImage);
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Case_Right_Plastic.geometry}
        material={plastic}
        position={[0, 0, 1.829]}
        rotation={[-Math.PI, 0, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Case_Right_Color.geometry}
        material={blackPlastic}
        position={[0.025, 0, 0]}
        rotation={[Math.PI / 2, 0, -Math.PI / 2]}
        scale={[0.25, 0.125, 0.25]}
      />
      
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Case_Left_Plastic.geometry}
        material={plastic}
        position={[-0.711, 0, 0.457]}
        rotation={[-Math.PI, -Math.PI / 3, 0]}
        scale={[0.207, 0.25, 0.25]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Paper.geometry}
        material={color}
        position={[-0.711, 0, 0.457]}
        rotation={[0, Math.PI / 3, -Math.PI / 2]}
        scale={[2.45, 1, 2.5]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.CD_DIsk.geometry}
        position={[0.012, 0, 0]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={[2.35, 1, 2.35]}
      >
        <meshStandardMaterial map={albumImage} />
      </mesh>
      <pointLight  position={[1, 1, 0]} intensity={5} />
    </group>
  )
}

useGLTF.preload('/models/cd.gltf')

